//----------------------------------------------------------------------------------
// File:        ComputeParticles/assets/shaders/particlesCS.glsl
// Url:         https://github.com/NVIDIAGameWorks/OpenGLSamples/tree/master/samples/es3aep-kepler/ComputeParticles
// SDK Version: v1.2 
// Email:       gameworks@nvidia.com
// Site:        http://developer.nvidia.com/
//
// Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//----------------------------------------------------------------------------------
#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

// Definitions
#define WORK_GROUP_SIZE 128
#define MAX_NUMBER_OF_EYE_PAIRS 5

#define PARTICLE_UPDATE_UBO 0
#define POSITION_SSBO 1
#define VELOCITY_SSBO 2
#define EYE_POSITION_UBO 3

// Uniforms
layout(std140, binding = PARTICLE_UPDATE_UBO) uniform ParticleParams
{
    uniform float    numParticles;
    uniform float    damping;
    uniform float    noiseFreq;
    uniform float    noiseStrength;
    uniform float    invNoiseSize;
};

uniform sampler3D    noiseTex3D;

layout(std140, binding = POSITION_SSBO) buffer Pos {
    vec4 pos[];
};

layout(std140, binding = VELOCITY_SSBO) buffer Vel {
    vec4 vel[];
};

layout(std140, binding = EYE_POSITION_UBO) uniform EyePositions {
    vec4 eye_positions[MAX_NUMBER_OF_EYE_PAIRS];
};

uniform uint numberOfEyePairs;

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// noise functions
// returns random value in [-1, 1]
vec3 noise3f(vec3 p)
{
    return texture(noiseTex3D, p * invNoiseSize).xyz;
}

// Fractal sum (Fractal Brownian Motion)
vec3 fBm3f(vec3 p, int octaves, float lacunarity, float gain)
{
    float freq = 1.0;
    float amp = 0.5;
    vec3 sum = vec3(0.0);
    for (int i=0; i < octaves; i++) {
        sum += noise3f(p * freq) * amp;
        freq *= lacunarity;
        amp *= gain;
    }
    return sum;
}

vec3 attract(vec3 p, vec3 p2)
{
    const float softeningSquared = 0.01;
    const vec3 v = p2 - p;
    float r2 = dot(v, v);
    r2 += softeningSquared;
    const float invDist = 1.0f / sqrt(r2);
    const float invDistCubed = invDist * invDist * invDist;
    return v * invDistCubed;
}

vec3 attractionToEyes(vec3 p) {
    vec3 eyeAttraction = vec3(0.);
    if (numberOfEyePairs == 0){
        return eyeAttraction;
    }

    for (uint j = 0; j < numberOfEyePairs; ++j) {
        const vec4 current_attractor = eye_positions[j];
        eyeAttraction += attract(p, current_attractor.xyz) * current_attractor.w;
    }
    eyeAttraction /= numberOfEyePairs;
    return eyeAttraction;
}

vec3 attractionToCameraFocusPoint(vec3 p)  {
    const vec3 origin = vec3(0.f);
    const vec3 vectorPointingFromParticleToOrigin = origin-p;
    const float boundingBoxSize = 3.;
    const float boundingBoxPullBackMultiplicator = 0.0005;

    if (abs(vectorPointingFromParticleToOrigin.x) > boundingBoxSize
    || abs(vectorPointingFromParticleToOrigin.y) > boundingBoxSize
    || abs(vectorPointingFromParticleToOrigin.z) > boundingBoxSize) {
        return vectorPointingFromParticleToOrigin * boundingBoxPullBackMultiplicator;
    }

    return vec3(0.);
}

// Compute shader to update particles
void main()
{
    uint i = gl_GlobalInvocationID.x;

    // Thread block size may not be exact multiple of number of particles.
    if (i > numParticles-1)
    {
        return;
    }

    // Read particle position and velocity from buffers.
    vec3 p = pos[i].xyz;
    vec3 v = vel[i].xyz;

    v += fBm3f(p * noiseFreq, 4, 2.0, 0.5) * noiseStrength;

    // Attract particle to eye positions
    v += attractionToEyes(p);

    // Make the particle stay in a box centered around the point the camera is looking at
    v += attractionToCameraFocusPoint(p);

    // Integrate
    p += v;
    v *= damping;

    // Write new values
    pos[i] = vec4(p, 1.0);
    vel[i] = vec4(v, 0.0);
}
